// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Jellyfin.Sdk.Generated.Models
{
    /// <summary>
    /// Playback info dto.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class PlaybackInfoDto : IParsable
    {
        /// <summary>Gets or sets a value indicating whether to allow audio stream copy.</summary>
        public bool? AllowAudioStreamCopy { get; set; }
        /// <summary>Gets or sets a value indicating whether to enable video stream copy.</summary>
        public bool? AllowVideoStreamCopy { get; set; }
        /// <summary>Gets or sets a value indicating whether always burn in subtitles when transcoding.</summary>
        public bool? AlwaysBurnInSubtitleWhenTranscoding { get; set; }
        /// <summary>Gets or sets the audio stream index.</summary>
        public int? AudioStreamIndex { get; set; }
        /// <summary>Gets or sets a value indicating whether to auto open the live stream.</summary>
        public bool? AutoOpenLiveStream { get; set; }
        /// <summary>A MediaBrowser.Model.Dlna.DeviceProfile represents a set of metadata which determines which content a certain device is able to play.&lt;br /&gt;Specifically, it defines the supported &lt;see cref=&quot;P:MediaBrowser.Model.Dlna.DeviceProfile.ContainerProfiles&quot;&gt;containers&lt;/see&gt; and&lt;see cref=&quot;P:MediaBrowser.Model.Dlna.DeviceProfile.CodecProfiles&quot;&gt;codecs&lt;/see&gt; (video and/or audio, including codec profiles and levels)the device is able to direct play (without transcoding or remuxing),as well as which &lt;see cref=&quot;P:MediaBrowser.Model.Dlna.DeviceProfile.TranscodingProfiles&quot;&gt;containers/codecs to transcode to&lt;/see&gt; in case it isn&apos;t.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Jellyfin.Sdk.Generated.Models.DeviceProfile? DeviceProfile { get; set; }
#nullable restore
#else
        public global::Jellyfin.Sdk.Generated.Models.DeviceProfile DeviceProfile { get; set; }
#endif
        /// <summary>Gets or sets a value indicating whether to enable direct play.</summary>
        public bool? EnableDirectPlay { get; set; }
        /// <summary>Gets or sets a value indicating whether to enable direct stream.</summary>
        public bool? EnableDirectStream { get; set; }
        /// <summary>Gets or sets a value indicating whether to enable transcoding.</summary>
        public bool? EnableTranscoding { get; set; }
        /// <summary>Gets or sets the live stream id.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LiveStreamId { get; set; }
#nullable restore
#else
        public string LiveStreamId { get; set; }
#endif
        /// <summary>Gets or sets the max audio channels.</summary>
        public int? MaxAudioChannels { get; set; }
        /// <summary>Gets or sets the max streaming bitrate.</summary>
        public int? MaxStreamingBitrate { get; set; }
        /// <summary>Gets or sets the media source id.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MediaSourceId { get; set; }
#nullable restore
#else
        public string MediaSourceId { get; set; }
#endif
        /// <summary>Gets or sets the start time in ticks.</summary>
        public long? StartTimeTicks { get; set; }
        /// <summary>Gets or sets the subtitle stream index.</summary>
        public int? SubtitleStreamIndex { get; set; }
        /// <summary>Gets or sets the playback userId.</summary>
        public Guid? UserId { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Jellyfin.Sdk.Generated.Models.PlaybackInfoDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Jellyfin.Sdk.Generated.Models.PlaybackInfoDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Jellyfin.Sdk.Generated.Models.PlaybackInfoDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "AllowAudioStreamCopy", n => { AllowAudioStreamCopy = n.GetBoolValue(); } },
                { "AllowVideoStreamCopy", n => { AllowVideoStreamCopy = n.GetBoolValue(); } },
                { "AlwaysBurnInSubtitleWhenTranscoding", n => { AlwaysBurnInSubtitleWhenTranscoding = n.GetBoolValue(); } },
                { "AudioStreamIndex", n => { AudioStreamIndex = n.GetIntValue(); } },
                { "AutoOpenLiveStream", n => { AutoOpenLiveStream = n.GetBoolValue(); } },
                { "DeviceProfile", n => { DeviceProfile = n.GetObjectValue<global::Jellyfin.Sdk.Generated.Models.DeviceProfile>(global::Jellyfin.Sdk.Generated.Models.DeviceProfile.CreateFromDiscriminatorValue); } },
                { "EnableDirectPlay", n => { EnableDirectPlay = n.GetBoolValue(); } },
                { "EnableDirectStream", n => { EnableDirectStream = n.GetBoolValue(); } },
                { "EnableTranscoding", n => { EnableTranscoding = n.GetBoolValue(); } },
                { "LiveStreamId", n => { LiveStreamId = n.GetStringValue(); } },
                { "MaxAudioChannels", n => { MaxAudioChannels = n.GetIntValue(); } },
                { "MaxStreamingBitrate", n => { MaxStreamingBitrate = n.GetIntValue(); } },
                { "MediaSourceId", n => { MediaSourceId = n.GetStringValue(); } },
                { "StartTimeTicks", n => { StartTimeTicks = n.GetLongValue(); } },
                { "SubtitleStreamIndex", n => { SubtitleStreamIndex = n.GetIntValue(); } },
                { "UserId", n => { UserId = n.GetGuidValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("AllowAudioStreamCopy", AllowAudioStreamCopy);
            writer.WriteBoolValue("AllowVideoStreamCopy", AllowVideoStreamCopy);
            writer.WriteBoolValue("AlwaysBurnInSubtitleWhenTranscoding", AlwaysBurnInSubtitleWhenTranscoding);
            writer.WriteIntValue("AudioStreamIndex", AudioStreamIndex);
            writer.WriteBoolValue("AutoOpenLiveStream", AutoOpenLiveStream);
            writer.WriteObjectValue<global::Jellyfin.Sdk.Generated.Models.DeviceProfile>("DeviceProfile", DeviceProfile);
            writer.WriteBoolValue("EnableDirectPlay", EnableDirectPlay);
            writer.WriteBoolValue("EnableDirectStream", EnableDirectStream);
            writer.WriteBoolValue("EnableTranscoding", EnableTranscoding);
            writer.WriteStringValue("LiveStreamId", LiveStreamId);
            writer.WriteIntValue("MaxAudioChannels", MaxAudioChannels);
            writer.WriteIntValue("MaxStreamingBitrate", MaxStreamingBitrate);
            writer.WriteStringValue("MediaSourceId", MediaSourceId);
            writer.WriteLongValue("StartTimeTicks", StartTimeTicks);
            writer.WriteIntValue("SubtitleStreamIndex", SubtitleStreamIndex);
            writer.WriteGuidValue("UserId", UserId);
        }
    }
}
#pragma warning restore CS0618
