// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Jellyfin.Sdk.Generated.Models
{
    /// <summary>
    /// Class MediaStream.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class MediaStream : IParsable
    {
        /// <summary>Gets or sets the aspect ratio.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? AspectRatio { get; set; }
#nullable restore
#else
        public string AspectRatio { get; set; }
#endif
        /// <summary>Gets the audio spatial format.</summary>
        public global::Jellyfin.Sdk.Generated.Models.MediaStream_AudioSpatialFormat? AudioSpatialFormat { get; private set; }
        /// <summary>Gets or sets the average frame rate.</summary>
        public float? AverageFrameRate { get; set; }
        /// <summary>Gets or sets the bit depth.</summary>
        public int? BitDepth { get; set; }
        /// <summary>Gets or sets the bit rate.</summary>
        public int? BitRate { get; set; }
        /// <summary>Gets or sets the Dolby Vision bl present flag.</summary>
        public int? BlPresentFlag { get; set; }
        /// <summary>Gets or sets the channel layout.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ChannelLayout { get; set; }
#nullable restore
#else
        public string ChannelLayout { get; set; }
#endif
        /// <summary>Gets or sets the channels.</summary>
        public int? Channels { get; set; }
        /// <summary>Gets or sets the codec.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Codec { get; set; }
#nullable restore
#else
        public string Codec { get; set; }
#endif
        /// <summary>Gets or sets the codec tag.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CodecTag { get; set; }
#nullable restore
#else
        public string CodecTag { get; set; }
#endif
        /// <summary>Gets or sets the codec time base.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? CodecTimeBase { get; set; }
#nullable restore
#else
        public string CodecTimeBase { get; set; }
#endif
        /// <summary>Gets or sets the color primaries.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ColorPrimaries { get; set; }
#nullable restore
#else
        public string ColorPrimaries { get; set; }
#endif
        /// <summary>Gets or sets the color range.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ColorRange { get; set; }
#nullable restore
#else
        public string ColorRange { get; set; }
#endif
        /// <summary>Gets or sets the color space.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ColorSpace { get; set; }
#nullable restore
#else
        public string ColorSpace { get; set; }
#endif
        /// <summary>Gets or sets the color transfer.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ColorTransfer { get; set; }
#nullable restore
#else
        public string ColorTransfer { get; set; }
#endif
        /// <summary>Gets or sets the comment.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Comment { get; set; }
#nullable restore
#else
        public string Comment { get; set; }
#endif
        /// <summary>Gets or sets the method.</summary>
        public global::Jellyfin.Sdk.Generated.Models.MediaStream_DeliveryMethod? DeliveryMethod { get; set; }
        /// <summary>Gets or sets the delivery URL.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DeliveryUrl { get; set; }
#nullable restore
#else
        public string DeliveryUrl { get; set; }
#endif
        /// <summary>The DisplayTitle property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DisplayTitle { get; private set; }
#nullable restore
#else
        public string DisplayTitle { get; private set; }
#endif
        /// <summary>Gets or sets the Dolby Vision bl signal compatibility id.</summary>
        public int? DvBlSignalCompatibilityId { get; set; }
        /// <summary>Gets or sets the Dolby Vision level.</summary>
        public int? DvLevel { get; set; }
        /// <summary>Gets or sets the Dolby Vision profile.</summary>
        public int? DvProfile { get; set; }
        /// <summary>Gets or sets the Dolby Vision version major.</summary>
        public int? DvVersionMajor { get; set; }
        /// <summary>Gets or sets the Dolby Vision version minor.</summary>
        public int? DvVersionMinor { get; set; }
        /// <summary>Gets or sets the Dolby Vision el present flag.</summary>
        public int? ElPresentFlag { get; set; }
        /// <summary>The Hdr10PlusPresentFlag property</summary>
        public bool? Hdr10PlusPresentFlag { get; set; }
        /// <summary>Gets or sets the height.</summary>
        public int? Height { get; set; }
        /// <summary>Gets or sets the index.</summary>
        public int? Index { get; set; }
        /// <summary>Gets or sets whether this instance is anamorphic.</summary>
        public bool? IsAnamorphic { get; set; }
        /// <summary>The IsAVC property</summary>
        public bool? IsAVC { get; set; }
        /// <summary>Gets or sets a value indicating whether this instance is default.</summary>
        public bool? IsDefault { get; set; }
        /// <summary>Gets or sets a value indicating whether this instance is external.</summary>
        public bool? IsExternal { get; set; }
        /// <summary>Gets or sets a value indicating whether this instance is external URL.</summary>
        public bool? IsExternalUrl { get; set; }
        /// <summary>Gets or sets a value indicating whether this instance is forced.</summary>
        public bool? IsForced { get; set; }
        /// <summary>Gets or sets a value indicating whether this instance is for the hearing impaired.</summary>
        public bool? IsHearingImpaired { get; set; }
        /// <summary>Gets or sets a value indicating whether this instance is interlaced.</summary>
        public bool? IsInterlaced { get; set; }
        /// <summary>The IsTextSubtitleStream property</summary>
        public bool? IsTextSubtitleStream { get; private set; }
        /// <summary>Gets or sets the language.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Language { get; set; }
#nullable restore
#else
        public string Language { get; set; }
#endif
        /// <summary>Gets or sets the level.</summary>
        public double? Level { get; set; }
        /// <summary>The LocalizedDefault property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LocalizedDefault { get; set; }
#nullable restore
#else
        public string LocalizedDefault { get; set; }
#endif
        /// <summary>The LocalizedExternal property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LocalizedExternal { get; set; }
#nullable restore
#else
        public string LocalizedExternal { get; set; }
#endif
        /// <summary>The LocalizedForced property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LocalizedForced { get; set; }
#nullable restore
#else
        public string LocalizedForced { get; set; }
#endif
        /// <summary>The LocalizedHearingImpaired property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LocalizedHearingImpaired { get; set; }
#nullable restore
#else
        public string LocalizedHearingImpaired { get; set; }
#endif
        /// <summary>The LocalizedUndefined property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? LocalizedUndefined { get; set; }
#nullable restore
#else
        public string LocalizedUndefined { get; set; }
#endif
        /// <summary>The NalLengthSize property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? NalLengthSize { get; set; }
#nullable restore
#else
        public string NalLengthSize { get; set; }
#endif
        /// <summary>Gets or sets the length of the packet.</summary>
        public int? PacketLength { get; set; }
        /// <summary>Gets or sets the filename.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Path { get; set; }
#nullable restore
#else
        public string Path { get; set; }
#endif
        /// <summary>Gets or sets the pixel format.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PixelFormat { get; set; }
#nullable restore
#else
        public string PixelFormat { get; set; }
#endif
        /// <summary>Gets or sets the profile.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Profile { get; set; }
#nullable restore
#else
        public string Profile { get; set; }
#endif
        /// <summary>Gets or sets the real frame rate.</summary>
        public float? RealFrameRate { get; set; }
        /// <summary>Gets the framerate used as reference.Prefer AverageFrameRate, if that is null or an unrealistic valuethen fallback to RealFrameRate.</summary>
        public float? ReferenceFrameRate { get; private set; }
        /// <summary>Gets or sets the reference frames.</summary>
        public int? RefFrames { get; set; }
        /// <summary>Gets or sets the Rotation in degrees.</summary>
        public int? Rotation { get; set; }
        /// <summary>Gets or sets the Dolby Vision rpu present flag.</summary>
        public int? RpuPresentFlag { get; set; }
        /// <summary>Gets or sets the sample rate.</summary>
        public int? SampleRate { get; set; }
        /// <summary>Gets or sets the score.</summary>
        public int? Score { get; set; }
        /// <summary>Gets or sets a value indicating whether [supports external stream].</summary>
        public bool? SupportsExternalStream { get; set; }
        /// <summary>Gets or sets the time base.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TimeBase { get; set; }
#nullable restore
#else
        public string TimeBase { get; set; }
#endif
        /// <summary>Gets or sets the title.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Title { get; set; }
#nullable restore
#else
        public string Title { get; set; }
#endif
        /// <summary>Gets or sets the type.</summary>
        public global::Jellyfin.Sdk.Generated.Models.MediaStream_Type? Type { get; set; }
        /// <summary>Gets the video dovi title.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? VideoDoViTitle { get; private set; }
#nullable restore
#else
        public string VideoDoViTitle { get; private set; }
#endif
        /// <summary>Gets the video range.</summary>
        public global::Jellyfin.Sdk.Generated.Models.MediaStream_VideoRange? VideoRange { get; private set; }
        /// <summary>Gets the video range type.</summary>
        public global::Jellyfin.Sdk.Generated.Models.MediaStream_VideoRangeType? VideoRangeType { get; private set; }
        /// <summary>Gets or sets the width.</summary>
        public int? Width { get; set; }
        /// <summary>
        /// Instantiates a new <see cref="global::Jellyfin.Sdk.Generated.Models.MediaStream"/> and sets the default values.
        /// </summary>
        public MediaStream()
        {
            AudioSpatialFormat = global::Jellyfin.Sdk.Generated.Models.MediaStream_AudioSpatialFormat.None;
            VideoRange = global::Jellyfin.Sdk.Generated.Models.MediaStream_VideoRange.Unknown;
            VideoRangeType = global::Jellyfin.Sdk.Generated.Models.MediaStream_VideoRangeType.Unknown;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Jellyfin.Sdk.Generated.Models.MediaStream"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Jellyfin.Sdk.Generated.Models.MediaStream CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Jellyfin.Sdk.Generated.Models.MediaStream();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "AspectRatio", n => { AspectRatio = n.GetStringValue(); } },
                { "AudioSpatialFormat", n => { AudioSpatialFormat = n.GetEnumValue<global::Jellyfin.Sdk.Generated.Models.MediaStream_AudioSpatialFormat>(); } },
                { "AverageFrameRate", n => { AverageFrameRate = n.GetFloatValue(); } },
                { "BitDepth", n => { BitDepth = n.GetIntValue(); } },
                { "BitRate", n => { BitRate = n.GetIntValue(); } },
                { "BlPresentFlag", n => { BlPresentFlag = n.GetIntValue(); } },
                { "ChannelLayout", n => { ChannelLayout = n.GetStringValue(); } },
                { "Channels", n => { Channels = n.GetIntValue(); } },
                { "Codec", n => { Codec = n.GetStringValue(); } },
                { "CodecTag", n => { CodecTag = n.GetStringValue(); } },
                { "CodecTimeBase", n => { CodecTimeBase = n.GetStringValue(); } },
                { "ColorPrimaries", n => { ColorPrimaries = n.GetStringValue(); } },
                { "ColorRange", n => { ColorRange = n.GetStringValue(); } },
                { "ColorSpace", n => { ColorSpace = n.GetStringValue(); } },
                { "ColorTransfer", n => { ColorTransfer = n.GetStringValue(); } },
                { "Comment", n => { Comment = n.GetStringValue(); } },
                { "DeliveryMethod", n => { DeliveryMethod = n.GetEnumValue<global::Jellyfin.Sdk.Generated.Models.MediaStream_DeliveryMethod>(); } },
                { "DeliveryUrl", n => { DeliveryUrl = n.GetStringValue(); } },
                { "DisplayTitle", n => { DisplayTitle = n.GetStringValue(); } },
                { "DvBlSignalCompatibilityId", n => { DvBlSignalCompatibilityId = n.GetIntValue(); } },
                { "DvLevel", n => { DvLevel = n.GetIntValue(); } },
                { "DvProfile", n => { DvProfile = n.GetIntValue(); } },
                { "DvVersionMajor", n => { DvVersionMajor = n.GetIntValue(); } },
                { "DvVersionMinor", n => { DvVersionMinor = n.GetIntValue(); } },
                { "ElPresentFlag", n => { ElPresentFlag = n.GetIntValue(); } },
                { "Hdr10PlusPresentFlag", n => { Hdr10PlusPresentFlag = n.GetBoolValue(); } },
                { "Height", n => { Height = n.GetIntValue(); } },
                { "Index", n => { Index = n.GetIntValue(); } },
                { "IsAVC", n => { IsAVC = n.GetBoolValue(); } },
                { "IsAnamorphic", n => { IsAnamorphic = n.GetBoolValue(); } },
                { "IsDefault", n => { IsDefault = n.GetBoolValue(); } },
                { "IsExternal", n => { IsExternal = n.GetBoolValue(); } },
                { "IsExternalUrl", n => { IsExternalUrl = n.GetBoolValue(); } },
                { "IsForced", n => { IsForced = n.GetBoolValue(); } },
                { "IsHearingImpaired", n => { IsHearingImpaired = n.GetBoolValue(); } },
                { "IsInterlaced", n => { IsInterlaced = n.GetBoolValue(); } },
                { "IsTextSubtitleStream", n => { IsTextSubtitleStream = n.GetBoolValue(); } },
                { "Language", n => { Language = n.GetStringValue(); } },
                { "Level", n => { Level = n.GetDoubleValue(); } },
                { "LocalizedDefault", n => { LocalizedDefault = n.GetStringValue(); } },
                { "LocalizedExternal", n => { LocalizedExternal = n.GetStringValue(); } },
                { "LocalizedForced", n => { LocalizedForced = n.GetStringValue(); } },
                { "LocalizedHearingImpaired", n => { LocalizedHearingImpaired = n.GetStringValue(); } },
                { "LocalizedUndefined", n => { LocalizedUndefined = n.GetStringValue(); } },
                { "NalLengthSize", n => { NalLengthSize = n.GetStringValue(); } },
                { "PacketLength", n => { PacketLength = n.GetIntValue(); } },
                { "Path", n => { Path = n.GetStringValue(); } },
                { "PixelFormat", n => { PixelFormat = n.GetStringValue(); } },
                { "Profile", n => { Profile = n.GetStringValue(); } },
                { "RealFrameRate", n => { RealFrameRate = n.GetFloatValue(); } },
                { "RefFrames", n => { RefFrames = n.GetIntValue(); } },
                { "ReferenceFrameRate", n => { ReferenceFrameRate = n.GetFloatValue(); } },
                { "Rotation", n => { Rotation = n.GetIntValue(); } },
                { "RpuPresentFlag", n => { RpuPresentFlag = n.GetIntValue(); } },
                { "SampleRate", n => { SampleRate = n.GetIntValue(); } },
                { "Score", n => { Score = n.GetIntValue(); } },
                { "SupportsExternalStream", n => { SupportsExternalStream = n.GetBoolValue(); } },
                { "TimeBase", n => { TimeBase = n.GetStringValue(); } },
                { "Title", n => { Title = n.GetStringValue(); } },
                { "Type", n => { Type = n.GetEnumValue<global::Jellyfin.Sdk.Generated.Models.MediaStream_Type>(); } },
                { "VideoDoViTitle", n => { VideoDoViTitle = n.GetStringValue(); } },
                { "VideoRange", n => { VideoRange = n.GetEnumValue<global::Jellyfin.Sdk.Generated.Models.MediaStream_VideoRange>(); } },
                { "VideoRangeType", n => { VideoRangeType = n.GetEnumValue<global::Jellyfin.Sdk.Generated.Models.MediaStream_VideoRangeType>(); } },
                { "Width", n => { Width = n.GetIntValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("AspectRatio", AspectRatio);
            writer.WriteFloatValue("AverageFrameRate", AverageFrameRate);
            writer.WriteIntValue("BitDepth", BitDepth);
            writer.WriteIntValue("BitRate", BitRate);
            writer.WriteIntValue("BlPresentFlag", BlPresentFlag);
            writer.WriteStringValue("ChannelLayout", ChannelLayout);
            writer.WriteIntValue("Channels", Channels);
            writer.WriteStringValue("Codec", Codec);
            writer.WriteStringValue("CodecTag", CodecTag);
            writer.WriteStringValue("CodecTimeBase", CodecTimeBase);
            writer.WriteStringValue("ColorPrimaries", ColorPrimaries);
            writer.WriteStringValue("ColorRange", ColorRange);
            writer.WriteStringValue("ColorSpace", ColorSpace);
            writer.WriteStringValue("ColorTransfer", ColorTransfer);
            writer.WriteStringValue("Comment", Comment);
            writer.WriteEnumValue<global::Jellyfin.Sdk.Generated.Models.MediaStream_DeliveryMethod>("DeliveryMethod", DeliveryMethod);
            writer.WriteStringValue("DeliveryUrl", DeliveryUrl);
            writer.WriteIntValue("DvBlSignalCompatibilityId", DvBlSignalCompatibilityId);
            writer.WriteIntValue("DvLevel", DvLevel);
            writer.WriteIntValue("DvProfile", DvProfile);
            writer.WriteIntValue("DvVersionMajor", DvVersionMajor);
            writer.WriteIntValue("DvVersionMinor", DvVersionMinor);
            writer.WriteIntValue("ElPresentFlag", ElPresentFlag);
            writer.WriteBoolValue("Hdr10PlusPresentFlag", Hdr10PlusPresentFlag);
            writer.WriteIntValue("Height", Height);
            writer.WriteIntValue("Index", Index);
            writer.WriteBoolValue("IsAnamorphic", IsAnamorphic);
            writer.WriteBoolValue("IsAVC", IsAVC);
            writer.WriteBoolValue("IsDefault", IsDefault);
            writer.WriteBoolValue("IsExternal", IsExternal);
            writer.WriteBoolValue("IsExternalUrl", IsExternalUrl);
            writer.WriteBoolValue("IsForced", IsForced);
            writer.WriteBoolValue("IsHearingImpaired", IsHearingImpaired);
            writer.WriteBoolValue("IsInterlaced", IsInterlaced);
            writer.WriteStringValue("Language", Language);
            writer.WriteDoubleValue("Level", Level);
            writer.WriteStringValue("LocalizedDefault", LocalizedDefault);
            writer.WriteStringValue("LocalizedExternal", LocalizedExternal);
            writer.WriteStringValue("LocalizedForced", LocalizedForced);
            writer.WriteStringValue("LocalizedHearingImpaired", LocalizedHearingImpaired);
            writer.WriteStringValue("LocalizedUndefined", LocalizedUndefined);
            writer.WriteStringValue("NalLengthSize", NalLengthSize);
            writer.WriteIntValue("PacketLength", PacketLength);
            writer.WriteStringValue("Path", Path);
            writer.WriteStringValue("PixelFormat", PixelFormat);
            writer.WriteStringValue("Profile", Profile);
            writer.WriteFloatValue("RealFrameRate", RealFrameRate);
            writer.WriteIntValue("RefFrames", RefFrames);
            writer.WriteIntValue("Rotation", Rotation);
            writer.WriteIntValue("RpuPresentFlag", RpuPresentFlag);
            writer.WriteIntValue("SampleRate", SampleRate);
            writer.WriteIntValue("Score", Score);
            writer.WriteBoolValue("SupportsExternalStream", SupportsExternalStream);
            writer.WriteStringValue("TimeBase", TimeBase);
            writer.WriteStringValue("Title", Title);
            writer.WriteEnumValue<global::Jellyfin.Sdk.Generated.Models.MediaStream_Type>("Type", Type);
            writer.WriteIntValue("Width", Width);
        }
    }
}
#pragma warning restore CS0618
