// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Jellyfin.Sdk.Generated.Models
{
    /// <summary>
    /// Defines the optional contents of the backup archive.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class BackupOptionsDto : IParsable
    {
        /// <summary>Gets or sets a value indicating whether the archive contains the Database contents.</summary>
        public bool? Database { get; set; }
        /// <summary>Gets or sets a value indicating whether the archive contains the Metadata contents.</summary>
        public bool? Metadata { get; set; }
        /// <summary>Gets or sets a value indicating whether the archive contains the Subtitle contents.</summary>
        public bool? Subtitles { get; set; }
        /// <summary>Gets or sets a value indicating whether the archive contains the Trickplay contents.</summary>
        public bool? Trickplay { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Jellyfin.Sdk.Generated.Models.BackupOptionsDto"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Jellyfin.Sdk.Generated.Models.BackupOptionsDto CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Jellyfin.Sdk.Generated.Models.BackupOptionsDto();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "Database", n => { Database = n.GetBoolValue(); } },
                { "Metadata", n => { Metadata = n.GetBoolValue(); } },
                { "Subtitles", n => { Subtitles = n.GetBoolValue(); } },
                { "Trickplay", n => { Trickplay = n.GetBoolValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("Database", Database);
            writer.WriteBoolValue("Metadata", Metadata);
            writer.WriteBoolValue("Subtitles", Subtitles);
            writer.WriteBoolValue("Trickplay", Trickplay);
        }
    }
}
#pragma warning restore CS0618
